{"searchDocs":[{"title":"üëê RUN : Authentication challenge","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/challenge/authentication","content":"","keywords":"","version":"Next"},{"title":"1. Let's create a SCRAM user: 'myUser' with User/Password authentication and assign it the 'readWriteAnyDatabase' role.‚Äã","type":1,"pageTitle":"üëê RUN : Authentication challenge","url":"/security-basics-lab/docs/challenge/authentication#1-lets-create-a-scram-user-myuser-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role","content":" # CODE_BLOCK_7 !atlas dbusers create &lt;CODE_BLOCK_7&gt;   tip Answer !atlas dbusers create --username myUser --password mySecurePassword --role readWriteAnyDatabase --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"2. Lets test our SCRAM user successful creation by performing the authentication process‚Äã","type":1,"pageTitle":"üëê RUN : Authentication challenge","url":"/security-basics-lab/docs/challenge/authentication#2-lets-test-our-scram-user-successful-creation-by-performing-the-authentication-process","content":" # CODE_BLOCK_8 !pip install pymongo dnspython   # CODE_BLOCK_9 connection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id} username = 'myUser' password = 'mySecurePassword' new_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@') print(new_connection) from pymongo import MongoClient client = MongoClient(new_connection) client.list_database_names()   ","version":"Next","tagName":"h3"},{"title":"3. Let's create X509 user: 'myX509User' with User/Password authentication and assign it the 'readWriteAnyDatabase' role.‚Äã","type":1,"pageTitle":"üëê RUN : Authentication challenge","url":"/security-basics-lab/docs/challenge/authentication#3-lets-create--x509-user-myx509user-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role","content":" # CODE_BLOCK_10 !atlas dbusers create ... !atlas dbusers certs create &lt;CODE_BLOCK_10&gt; &gt; /tmp/cert.pem   tip Answer # Generate an X509 certificate for a new user !atlas dbusers create --username myX509User --x509Type MANAGED --role readAnyDatabase --projectId {project_id} # Generate and save the certificate !atlas dbusers certs create --username myX509User --monthsUntilExpiration 1 --projectId {project_id} &gt; /tmp/cert.pem   ","version":"Next","tagName":"h3"},{"title":"4. Let's test our X509 User‚Äã","type":1,"pageTitle":"üëê RUN : Authentication challenge","url":"/security-basics-lab/docs/challenge/authentication#4-lets-test-our-x509-user","content":" # CODE_BLOCK_11 username='myX509User' connection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id} new_connection = connection[1].replace('.net', '.net?authSource=%24external&amp;authMechanism=MONGODB-X509') print(new_connection) # Connect using the certificate from pymongo import MongoClient client = MongoClient(new_connection, tlsCertificateKeyFile='/tmp/cert.pem') # Access the database client.list_database_names()   ","version":"Next","tagName":"h3"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üëê RUN : Authentication challenge","url":"/security-basics-lab/docs/challenge/authentication#next-steps","content":" Start the chapter on RBAC for Role Based Access user management. ","version":"Next","tagName":"h2"},{"title":"üëê RUN : Network challenge","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/challenge/network","content":"","keywords":"","version":"Next"},{"title":"1. Add 'My current IP' temporary into the atlas project‚Äã","type":1,"pageTitle":"üëê RUN : Network challenge","url":"/security-basics-lab/docs/challenge/network#1-add-my-current-ip-temporary-into-the-atlas-project","content":" # CODE_BLOCK_5 from datetime import datetime, timedelta # Calculate the date and time 24 hours from now delete_after = (datetime.utcnow() + timedelta(hours=24)).isoformat() + 'Z' !atlas accessLists &lt;CODE_BLOCK_5&gt;   tip Docs : atlas accessList Answer from datetime import datetime, timedelta # Calculate the date and time 24 hours from now delete_after = (datetime.utcnow() + timedelta(hours=24)).isoformat() + 'Z' !atlas accessLists create --currentIp --projectId {project_id} --deleteAfter &quot;{delete_after}&quot;   ","version":"Next","tagName":"h3"},{"title":"2. Check that 'My current IP' was added:‚Äã","type":1,"pageTitle":"üëê RUN : Network challenge","url":"/security-basics-lab/docs/challenge/network#2-check-that-my-current-ip-was-added","content":" # CODE_BLOCK_6 !atlas accessLists list --output json --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üëê RUN : Network challenge","url":"/security-basics-lab/docs/challenge/network#next-steps","content":" Start the chapter on Authentication for database user management. ","version":"Next","tagName":"h2"},{"title":"üìò MongoDB Security Configuration","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/atlas","content":"","keywords":"","version":"Next"},{"title":"Network Security‚Äã","type":1,"pageTitle":"üìò MongoDB Security Configuration","url":"/security-basics-lab/docs/atlas#network-security","content":" MongoDB AtlasOn-Premises IP Access List‚Äã Control which IP addresses can connect to your cluster: // Using Atlas CLI atlas accessLists create --currentIp atlas accessLists create --ip &quot;203.0.113.0/24&quot; Importance: Restricting access to known IP addresses prevents unauthorized connections and reduces the risk of external attacks. Private Endpoints‚Äã Set up AWS PrivateLink: // Create private endpoint atlas privateEndpoints aws create --region us-east-1 --projectId 5e2211c17a3e5a48f5497de3 --output json Importance: Private endpoints ensure that traffic between your application and MongoDB Atlas remains within your private network, enhancing security and reducing exposure to the public internet. Network Peering‚Äã // Set up VPC peering atlas networking peering create aws --accountId 854333054055 --atlasCidrBlock 192.168.0.0/24 --region us-east-1 --routeTableCidrBlock 10.0.0.0/24 --vpcId vpc-078ac381aa90e1e63 Importance: Network peering allows you to connect your VPC to MongoDB Atlas's VPC, providing a secure and private connection without traversing the public internet.  ","version":"Next","tagName":"h2"},{"title":"Encryption Configuration‚Äã","type":1,"pageTitle":"üìò MongoDB Security Configuration","url":"/security-basics-lab/docs/atlas#encryption-configuration","content":" MongoDB AtlasOn-Premises Encryption at Rest‚Äã Atlas automatically encrypts all data using: AWS: AWS KMSAzure: Azure Key VaultGCP: Cloud KMS Importance: Encryption at rest protects your data from unauthorized access if the storage media is compromised.  ","version":"Next","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"üìò MongoDB Security Configuration","url":"/security-basics-lab/docs/atlas#best-practices","content":" MongoDB AtlasOn-Premises Network Security Use private endpoints where possibleRegularly review IP access listsImplement VPC peering Access Management Follow principle of least privilegeRegular credential rotationUse strong authentication methods Monitoring and Alerts Set up alerts for security eventsMonitor access patternsReview audit logs regularly  ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üìò MongoDB Security Configuration","url":"/security-basics-lab/docs/atlas#next-steps","content":" Let's start the network access control challenge ","version":"Next","tagName":"h2"},{"title":"üëê RUN : RBAC challenge","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/challenge/rbac","content":"","keywords":"","version":"Next"},{"title":"1. Let's create a user: 'myAdmin' with User/Password authentication and assign it the 'readWriteAnyDatabase' role, but only for the 'MyNewCluster' database.‚Äã","type":1,"pageTitle":"üëê RUN : RBAC challenge","url":"/security-basics-lab/docs/challenge/rbac#1-lets-create-a-user-myadmin-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role-but-only-for-the-mynewcluster-database","content":" # CODE_BLOCK_12 !atlas dbusers create &lt;CODE_BLOCK_12&gt;   tip Answer !atlas dbusers create --username myAdmin --password secureAdminPass --role readWriteAnyDatabase --scope 'MyNewCluster' --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"2. Let's create a user: 'readOnlyUser' with read-only access to the 'salesDB' database.‚Äã","type":1,"pageTitle":"üëê RUN : RBAC challenge","url":"/security-basics-lab/docs/challenge/rbac#2-lets-create-a-user-readonlyuser-with-read-only-access-to-the-salesdb-database","content":" # CODE_BLOCK_13 !atlas customDbRoles create &lt;CODE_BLOCK_13&gt; !atlas dbusers create &lt;CODE_BLOCK_13&gt;   tip Answer !atlas customDbRoles create salesRead --inheritedRole read@salesDB --projectId {project_id} !atlas dbusers create --username readOnlyUser --password readOnlyPass --role salesRead --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"3. Let's test that the 'readOnlyUser' cannot insert data into the 'salesDB' database.‚Äã","type":1,"pageTitle":"üëê RUN : RBAC challenge","url":"/security-basics-lab/docs/challenge/rbac#3-lets-test-that-the-readonlyuser-cannot-insert-data-into-the-salesdb-database","content":" # CODE_BLOCK_14 # Assuming you have the connection string and credentials for the readOnlyUser username = 'readOnlyUser' password = 'readOnlyPass' connection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id} new_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@') client = MongoClient(new_connection) db = client['salesDB'] collection = db['mycollection'] try: # Attempt to insert data data = {'name': 'John Doe', 'age': 30} result = collection.insert_one(data) print(f&quot;Inserted document with ID: {result.inserted_id}&quot;) except Exception as e: print(f&quot;Error inserting data: {e}&quot;)   ","version":"Next","tagName":"h3"},{"title":"4. Let's test that the 'myAdmin' user can insert data into the 'salesDB' database.‚Äã","type":1,"pageTitle":"üëê RUN : RBAC challenge","url":"/security-basics-lab/docs/challenge/rbac#4-lets-test-that-the-myadmin-user-can-insert-data-into-the-salesdb-database","content":" # CODE_BLOCK_15 # Assuming you have the connection string and credentials for the myAdmin user username = 'myAdmin' password = 'secureAdminPass' connection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id} new_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@') client = MongoClient(new_connection) db = client['salesDB'] collection = db['mycollection'] try: # Attempt to insert data data = {'name': 'John Doe', 'age': 30} result = collection.insert_one(data) print(f&quot;Inserted document with ID: {result.inserted_id}&quot;) except Exception as e: print(f&quot;Error inserting data: {e}&quot;)   ","version":"Next","tagName":"h3"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üëê RUN : RBAC challenge","url":"/security-basics-lab/docs/challenge/rbac#next-steps","content":" Start the chapter on Queryable Encryption for data encryption. ","version":"Next","tagName":"h2"},{"title":"MongoDB Security Basics","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Overview‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#overview","content":" This guide is structured to help you understand and implement MongoDB security features effectively. Each section provides side-by-side comparisons of implementing security features in both MongoDB Atlas and On-premises environments.  In the navigation bar and in some pages, you will notice some icons. Here is their meaning:  Icon\tMeaning\tDescriptionüìò\tLecture material\tIf you are following along in an instructor-led session, they probably have covered this already. üëê\tHands-on content\tGet ready to do some hands-on work. You should follow these steps. üìö\tDocumentation\tReference documentation for hands-on portions of the lab. ü¶π\tAdvanced content\tThis content isn't covered during the lab, but if you're interested in learning more, you can check it out.  ","version":"Next","tagName":"h2"},{"title":"Topics Covered‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#topics-covered","content":" ","version":"Next","tagName":"h2"},{"title":"1. Intro and Network Security‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#1-intro-and-network-security","content":" Explore Atlas-specific security features:  Network access controlsPrivate endpoints  Explore self-hosted considerations for network security  ","version":"Next","tagName":"h3"},{"title":"2. Authentication‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#2-authentication","content":" Learn about different authentication mechanisms and how to:  Set up user authenticationImplement X.509 certificate authenticationManage credentials securely  ","version":"Next","tagName":"h3"},{"title":"3. Role-Based Access Control (RBAC)‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#3-role-based-access-control-rbac","content":" Understand how to:  Create and manage rolesAssign privileges to rolesImplement role inheritanceFollow security best practices for access control  ","version":"Next","tagName":"h3"},{"title":"4. Queryable Encryption‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#4-queryable-encryption","content":" Learn how to handle your sensitive information with our most advanced encryption technique:  Setup encrypiton keysCreate an encrypted clientWrite and read encrypted field data  ","version":"Next","tagName":"h3"},{"title":"5. Security Considerations and Summary‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#5-security-considerations-and-summary","content":" Learn about additional Atlas and self-hosted security configurations:  System hardeningEncryption optionsDatabase auditingBackup securityAudit loggingBackup strategies  ","version":"Next","tagName":"h3"},{"title":"Getting Started‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#prerequisites","content":" Before implementing security measures, ensure you have:  MongoDB Atlas Users An Atlas accountAccess to a notebook environment to install Atlas CLI on. Recommended one of: Google colab , for general concepts: get yourself familiar using this notebook.Github CodespacesVS Code On-Premises Users MongoDB installedAdministrative accessBasic understanding of Linux/Unix systems  ","version":"Next","tagName":"h3"},{"title":"Using This Guide‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#using-this-guide","content":" Each section provides:  Side-by-side comparisons of Atlas and On-premises implementationsPractical code examplesBest practicesSecurity checklistsHands-on exercises by using .ipynb notebooks.  ","version":"Next","tagName":"h2"},{"title":"Tab Navigation‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#tab-navigation","content":" Throughout this guide, you'll find content organized in tabs:  Atlas: MongoDB Atlas specific instructionsOn-Premises: Self-hosted deployment instructions  This allows you to focus on the content relevant to your deployment type while understanding the differences between approaches.  ","version":"Next","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#security-best-practices","content":" Regardless of your deployment type, always:  Network Security  Restrict network accessUse TLS/SSL encryptionImplement proper firewall rules  Enable Authentication Never run MongoDB without authenticationUse strong passwordsImplement appropriate authentication mechanisms Use Access Controls Follow the principle of least privilegeRegularly audit user accessImplement role-based access control Use Queryable Encryption Setup queryable encryptionCreate database encrypted client and collectionsRead and write encrypted documents.  ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#next-steps","content":" Start with Initial Setup to get started on completing the challenge sections.Progress to Network Setup for authorising access and Authentication for database user management and Authorization.Explore Queryable Encryption for document based security.Finally, recap everything in Security Considerations and Summary.  ","version":"Next","tagName":"h2"},{"title":"Additional Resources‚Äã","type":1,"pageTitle":"MongoDB Security Basics","url":"/security-basics-lab/docs/intro#additional-resources","content":" MongoDB Security DocumentationMongoDB Atlas DocumentationSecurity Checklist  Remember to regularly review and update your security configurations to maintain the safety of your MongoDB deployments. ","version":"Next","tagName":"h2"},{"title":"Authentication in MongoDB","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/authentication","content":"","keywords":"","version":"Next"},{"title":"Authentication Mechanisms‚Äã","type":1,"pageTitle":"Authentication in MongoDB","url":"/security-basics-lab/docs/authentication#authentication-mechanisms","content":" MongoDB AtlasOn-Premises MongoDB Atlas supports multiple authentication mechanisms: SCRAM (Default): The default and simplest mechanism for MongoDB, providing secure authentication using salted challenge-response methods. (For production deployment we recommend using a more advanced authentication mechanism)X.509 Certificate Authentication: Certificate-based authentication that uses SSL/TLS certificates for verifying client identity, typically used in environments that require high security.AWS IAM Authentication:MongoDB Atlas supports AWS IAM authentication, allowing users to authenticate using their AWS Identity and Access Management roles, which is useful for integration with AWS services.Workforce Identity Federation Authentication: Allows users to integrate MongoDB Atlas with external identity providers (IdPs) like Okta or Azure AD for centralized access management and single sign-on (SSO).Workload Identity Federation Authentication: Enables authentication for applications and workloads by allowing them to assume predefined roles, simplifying access management for services running in hybrid or multi-cloud environments.LDAP Authentication: Allows integration with corporate directory services, enabling centralized management of user access across the organization. SCRAM Authentication‚Äã SCRAM (Salted Challenge Response Authentication Mechanism) is MongoDB's default authentication mechanism. It provides secure username/password authentication. Creating a User with SCRAM Authentication‚Äã // In MongoDB Atlas UI: Database Access &gt; Add New Database User // Or using Atlas CLI: atlas dbusers create --username demoUser --password mySecurePassword --role readWriteAnyDatabase --projectId Database user 'demoUser' successfully created. Atlas Administration API //Use Atlas Admin API POST /api/atlas/v1.0/groups/{GROUP-ID}/databaseUsers { &quot;databaseName&quot;: &quot;admin&quot;, &quot;username&quot;: &quot;demoUser&quot;, &quot;password&quot;: &quot;secure_password&quot;, &quot;roles&quot;: [{ &quot;roleName&quot;: &quot;readWrite&quot;, &quot;databaseName&quot;: &quot;myDatabase&quot; }] } Connecting with SCRAM Authentication‚Äã mongosh &quot;mongodb+srv://cluster0.example.mongodb.net/myDatabase&quot; \\ --username demoUser \\ --password mySecurePassword AWS IAM Authentication‚Äã Atlas clusters on AWS can use IAM authentication: Configure IAM Authentication in Atlas UICreate an IAM Role with necessary permissionsConnect using AWS credentials: mongosh &quot;mongodb+srv://&lt;atlas-host-name&gt;/test?authSource=%24external&amp;authMechanism=MONGODB-AWS&quot; --username &lt;access-key-id&gt; --password &lt;secret-key&gt; X.509 Certificate Authentication‚Äã Certificate-based authentication that uses SSL/TLS certificates for verifying client identity, typically used in environments that require high security. ## Create User !atlas dbusers create --username demoX509User --x509Type MANAGED --role readAnyDatabase --projectId {project_id} ## Create the relevant certificate !atlas dbusers certs create --username demoX509User --monthsUntilExpiration 1 --projectId {project_id} &gt; /tmp/cert.pem Connect using X509 via shell mongosh &quot;mongodb+srv://&lt;atlas-host-name&gt;/test?authSource=%24external&amp;authMechanism=MONGODB-X509&quot; --tlsCertificateKeyFile /tmp/cert.pem   ","version":"Next","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"Authentication in MongoDB","url":"/security-basics-lab/docs/authentication#best-practices","content":" MongoDB AtlasOn-Premises User Management Use Database Access page in Atlas UI for user managementImplement role-based access control (RBAC)Regularly audit user access and permissions Connection Security Use connection strings with mongodb+srv:// protocolEnable Network Access List restrictionsImplement IP access lists Authentication Methods Use AWS IAM authentication when possible for AWS deploymentsImplement strong password policiesConsider X.509 for application authentication  ","version":"Next","tagName":"h2"},{"title":"Challenges and Exercises‚Äã","type":1,"pageTitle":"Authentication in MongoDB","url":"/security-basics-lab/docs/authentication#challenges-and-exercises","content":" Let's move to the Authentication challenge.  ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"Authentication in MongoDB","url":"/security-basics-lab/docs/authentication#next-steps","content":" After mastering authentication, proceed to learn about Role-Based Access Control (RBAC) to implement fine-grained access control for your MongoDB deployment. ","version":"Next","tagName":"h2"},{"title":"üìò Queryable Encryption","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/queryable-encryption","content":"","keywords":"","version":"Next"},{"title":"Introduction‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#introduction","content":" Queryable Encryption is a groundbreaking technology that allows you to run specific queries on encrypted data without the need to decrypt it on the server. In MongoDB, this means sensitive data can remain encrypted throughout its lifecycle ‚Äì at rest, in transit, and even during query processing. By enabling Queryable Encryption, you significantly reduce the attack surface by minimizing the exposure of plaintext data, even to authorized database administrators. This strengthens your security posture and helps meet stringent compliance requirements.  ","version":"Next","tagName":"h2"},{"title":"Why is Queryable Encryption Important in MongoDB?‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#why-is-queryable-encryption-important-in-mongodb","content":" MongoDB, while offering various security features, can benefit significantly from Queryable Encryption for scenarios involving highly sensitive data. By implementing it, you ensure:  Enhanced Data Protection: Sensitive data remains encrypted even when it is being processed on the database side, minimizing the risk of exposure in case of a security breach or unauthorized access.Compliance with Regulations: Helps meet stringent data privacy regulations like GDPR, HIPAA, and others that mandate strong encryption and control over sensitive information.Reduced Insider Threat: Even database administrators or authorized personnel with access to the database infrastructure cannot see the plaintext data without the appropriate decryption keys managed outside of the database.Maintain Functionality: Unlike traditional encryption where data needs to be decrypted for querying, Queryable Encryption allows you to perform specific types of queries directly on the encrypted data, preserving application functionality.  ","version":"Next","tagName":"h2"},{"title":"Overview‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#overview","content":" MongoDB AtlasOn-Premises In MongoDB Atlas, Queryable Encryption is available for: M10 or larger clustersMongoDB 7.0 or laterEnterprise or Atlas deployments To enable Queryable Encryption: Create an encryption key in your preferred Key Management System (local, AWS KMS, Azure Key Vault, GCP KMS)Configure your Atlas cluster to use the KMS providerUse the MongoDB driver with Queryable Encryption support  ","version":"Next","tagName":"h2"},{"title":"Key Concepts in Queryable Encryption:‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#key-concepts-in-queryable-encryption","content":" Key Management System (KMS): A secure system for managing encryption keys. MongoDB Queryable Encryption relies on either local keys/on-premises vaults like Hasicorp, or external KMS providers like AWS KMS, Azure Key Vault, Google Cloud KMS to store and manage the cryptographic keys.Encryption on Field Level Basis: Encryption and decryption operations are performed on the client-side application before data is sent to or retrieved from the MongoDB server. This ensures that the server only handles encrypted data.Encryption Schema: Defines which fields in your documents need to be encrypted and specifies the type of encryption to be used for each field, influencing the types of queries that can be performed on that field.  ","version":"Next","tagName":"h2"},{"title":"Implementation‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#implementation","content":" ","version":"Next","tagName":"h2"},{"title":"Setting Up Queryable Encryption‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#setting-up-queryable-encryption","content":" Configure KMS Provider: This step configures the Key Management System (KMS) provider. In this example, it shows how to configure AWS KMS by providing access key ID and secret access key. It also shows how to configure a master key with its key, region, and endpoint.  const kmsProviders = { aws: { accessKeyId: process.env.AWS_ACCESS_KEY_ID, secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY } }; const masterKey = { key: process.env.MASTER_KEY, region: &quot;us-east-1&quot;, endpoint: &quot;kms.us-east-1.amazonaws.com&quot; };   Or local key: This shows how to configure a local key for testing purposes.  local_master_key = os.urandom(96) kms_providers = {&quot;local&quot;: {&quot;key&quot;: local_master_key}}   Create Client Encryption: This step creates a client with auto encryption options.  encrypted_client = MongoClient( new_connection, auto_encryption_opts=auto_encryption_options)   Define Encryption Schema: This step defines the encryption schema for the fields that need to be encrypted. In this example, the &quot;accountNumber&quot; field is configured for equality queries.  encrypted_fields_map = { &quot;fields&quot;: [ { &quot;path&quot;: &quot;accountNumber&quot;, &quot;bsonType&quot;: &quot;string&quot;, &quot;queries&quot;: [{&quot;queryType&quot;: &quot;equality&quot;}] # potentially 'range' } ] } ;   ","version":"Next","tagName":"h3"},{"title":"Using Encrypted Fields‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#using-encrypted-fields","content":" ","version":"Next","tagName":"h2"},{"title":"Creating & Querying Documents with Encrypted Fields‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#creating--querying-documents-with-encrypted-fields","content":" The following example demonstrates the complete workflow for creating and querying documents with encrypted fields:  # Step 1: Initialize the encrypted client with auto-encryption options # This client automatically handles encryption/decryption of specified fields encrypted_client = MongoClient( new_connection, auto_encryption_opts=auto_encryption_options) # Step 2: Set up the client encryption object # This object manages the encryption keys and handles the encryption operations client_encryption = ClientEncryption( kms_providers=kms_providers, key_vault_namespace=key_vault_namespace, key_vault_client=encrypted_client, codec_options=CodecOptions() ) # Step 3: Create an encrypted collection with the specified encryption schema # This sets up the collection with automatic field-level encryption client_encryption.create_encrypted_collection( encrypted_client[encrypted_database_name], encrypted_collection_name, encrypted_fields_map, kms_provider_name, {}, ) # Step 4: Prepare a document with sensitive information # Note: The 'accountNumber' field will be automatically encrypted based on the schema doc = { &quot;owner&quot;: &quot;Jon Doe&quot;, &quot;accountNumber&quot;: &quot;987-65-4320&quot;, # This field will be encrypted &quot;billing&quot;: { &quot;type&quot;: &quot;Visa&quot;, &quot;number&quot;: &quot;4111111111111111&quot;, # Consider encrypting this field too } } # Step 5: Get a reference to the encrypted collection encrypted_collection = encrypted_client[encrypted_database_name][encrypted_collection_name] # Step 6: Insert the document # The encryption happens automatically for the specified fields result = encrypted_collection.insert_one(doc) print(f&quot;Inserted document ID: {result.inserted_id}&quot;) # Step 7: Query the encrypted collection # You can query encrypted fields normally - the encryption/decryption is handled automatically find_result = encrypted_collection.find_one({ &quot;accountNumber&quot;: &quot;987-65-4320&quot; # The query value is automatically encrypted }) print(find_result) # The result is automatically decrypted when retrieved   This example demonstrates the power of Queryable Encryption - you can work with encrypted data as if it were normal data, while the encryption and decryption happen automatically in the background based on your schema configuration.  ","version":"Next","tagName":"h3"},{"title":"Supported Query Types‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#supported-query-types","content":" Queryable Encryption supports various query types depending on the encryption algorithm:  Equality Queries Exact matches on encrypted fieldsSupported with deterministic encryptionExample: {&quot;encryptedField&quot;: &quot;exactValue&quot;} Range Queries Comparison operators ($gt, $gte, $lt, $lte)Available for range-queryable encrypted fieldsExample: {&quot;encryptedField&quot;: {&quot;$gt&quot;: &quot;value&quot;}}Requires RangePreview algorithm  ","version":"Next","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#best-practices","content":" Key Management Securely Manage KMS Credentials: Protect your KMS access keys and credentials diligently. Use best practices for secret management.Regularly rotate encryption keysSecurely store and backup keysUse separate keys for different environments Performance Considerations Understand Performance Implications: Queryable Encryption involves additional resources for indexing and storage on the server side. Test and optimize your application accordingly. Tune the relevant parameters and document design for best performance.Index encrypted fields when neededMonitor query performance on encrypted fieldsUse appropriate encryption algorithms Security Guidelines Principle of Least Privilege: Grant only the necessary permissions to access encryption keys.Follow the principle of least privilegeEncrypt only necessary fieldsRegularly audit encryption configurations  ","version":"Next","tagName":"h2"},{"title":"Challenges and Exercises‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#challenges-and-exercises","content":" For hands-on practice with Queryable Encryption concepts, check out our practical challenges.  ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üìò Queryable Encryption","url":"/security-basics-lab/docs/queryable-encryption#next-steps","content":" After implementing Queryable Encryption, you can reach the final closing phase of Additional Security Considerations and Summary. ","version":"Next","tagName":"h2"},{"title":"üëê RUN : Queryable Encryption challenge","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/challenge/queryable-encryption","content":"","keywords":"","version":"Next"},{"title":"1. Install the necessary packages.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#1-install-the-necessary-packages","content":" # CODE_BLOCK_16 !pip install pymongo[encryption] !pip install pymongo !pip install requests   ","version":"Next","tagName":"h3"},{"title":"2. Set up the crypt_shared library.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#2-set-up-the-crypt_shared-library","content":" # CODE_BLOCK_17 import os from pymongo import MongoClient from pymongo.encryption import Algorithm, ClientEncryption, QueryType from pymongo.encryption_options import AutoEncryptionOpts from bson.codec_options import CodecOptions from bson import json_util import json import requests import platform import tempfile def setup_crypt_shared(): system = platform.system().lower() if system == &quot;linux&quot;: url = &quot;https://downloads.mongodb.com/linux/mongo_crypt_shared_v1-linux-x86_64-enterprise-ubuntu2004-6.0.6.tgz&quot; filename = &quot;mongo_crypt_shared_v1-linux-x86_64-enterprise-ubuntu2004-6.0.6.tgz&quot; elif system == &quot;darwin&quot;: url = &quot;https://downloads.mongodb.com/osx/mongo_crypt_shared_v1-macos-x86_64-enterprise-6.0.6.tgz&quot; filename = &quot;mongo_crypt_shared_v1-macos-x86_64-enterprise-6.0.6.tgz&quot; elif system == &quot;windows&quot;: url = &quot;https://downloads.mongodb.com/windows/mongo_crypt_shared_v1-windows-x86_64-enterprise-6.0.6.zip&quot; filename = &quot;mongo_crypt_shared_v1-windows-x86_64-enterprise-6.0.6.zip&quot; else: raise OSError(&quot;Unsupported operating system&quot;) response = requests.get(url) response.raise_for_status() with tempfile.NamedTemporaryFile(delete=False, suffix=&quot;.tgz&quot; if system != &quot;windows&quot; else &quot;.zip&quot;) as tmp_file: tmp_file.write(response.content) tmp_file_path = tmp_file.name extract_dir = tempfile.mkdtemp() if system != &quot;windows&quot;: os.system(f&quot;tar -xzf {tmp_file_path} -C {extract_dir}&quot;) lib_path = os.path.join(extract_dir, &quot;lib&quot;, &quot;mongo_crypt_v1.so&quot;) else: os.system(f&quot;powershell Expand-Archive -Path {tmp_file_path} -DestinationPath {extract_dir}&quot;) lib_path = os.path.join(extract_dir, &quot;bin&quot;, &quot;mongo_crypt_v1.dll&quot;) return lib_path crypt_shared_lib_path = setup_crypt_shared() print(f&quot;Crypt shared library path: {crypt_shared_lib_path}&quot;)   ","version":"Next","tagName":"h3"},{"title":"3. Connect to your Atlas cluster.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#3-connect-to-your-atlas-cluster","content":" # CODE_BLOCK_18 connection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id} username = 'myUser' password = 'mySecurePassword' new_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@') print(new_connection) from pymongo import MongoClient client = MongoClient(new_connection)   ","version":"Next","tagName":"h3"},{"title":"4. Set up encryption key and providers, define the encrypted fields map, create an encrypted client, and set up the key vault.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#4-set-up-encryption-key-and-providers-define-the-encrypted-fields-map-create-an-encrypted-client-and-set-up-the-key-vault","content":" # CODE_BLOCK_19 local_master_key = os.urandom(96) kms_providers = {&quot;local&quot;: {&quot;key&quot;: local_master_key}} key_vault_namespace = &quot;encryption.__keyVault&quot; kms_provider_name=&quot;local&quot; key_vault_database_name = &quot;encryption&quot; key_vault_collection_name = &quot;__keyVault&quot; key_vault_namespace = f&quot;{key_vault_database_name}.{key_vault_collection_name}&quot; encrypted_database_name = &quot;medicalRecords&quot; encrypted_collection_name = &quot;patients&quot; auto_encryption_options = AutoEncryptionOpts( kms_providers, key_vault_namespace, crypt_shared_lib_path=crypt_shared_lib_path ) encrypted_client = MongoClient( new_connection, auto_encryption_opts=auto_encryption_options) client_encryption = ClientEncryption( kms_providers=kms_providers, key_vault_namespace=key_vault_namespace, key_vault_client=encrypted_client, codec_options=CodecOptions() )   ","version":"Next","tagName":"h3"},{"title":"5. Consider the following patient document:‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#5-consider-the-following-patient-document","content":" patient_document = { &quot;patientName&quot;: &quot;Jon Doe&quot;, &quot;patientId&quot;: 12345678, &quot;patientRecord&quot;: { &quot;ssn&quot;: &quot;987-65-4320&quot;, &quot;billing&quot;: { &quot;type&quot;: &quot;Visa&quot;, &quot;number&quot;: &quot;4111111111111111&quot;, }, }, }   ","version":"Next","tagName":"h3"},{"title":"6. Create an encrypted collection based on the following requirements:‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#6-create-an-encrypted-collection-based-on-the-following-requirements","content":" 'patientId' and 'billing' must be encryptedpatients will be queried by 'patientId'  # TODO CODE_BLOCK_19 encrypted_fields_map = &lt;CODE_BLOCK_19&gt; # TODO CODE_BLOCK_19 client_encryption.create_encrypted_collection( encrypted_client[encrypted_database_name], encrypted_collection_name, &lt;CODE_BLOCK_19&gt;, kms_provider_name, {}, )   tip Answer encrypted_fields_map = { &quot;fields&quot;: [ { &quot;path&quot;: &quot;patientRecord.ssn&quot;, &quot;bsonType&quot;: &quot;string&quot;, &quot;queries&quot;: [{&quot;queryType&quot;: &quot;equality&quot;}] # potentially 'range' }, { &quot;path&quot;: &quot;patientRecord.billing&quot;, &quot;bsonType&quot;: &quot;object&quot;, } ] } client_encryption.create_encrypted_collection( encrypted_client[encrypted_database_name], encrypted_collection_name, encrypted_fields_map, kms_provider_name, {}, )   ","version":"Next","tagName":"h3"},{"title":"7. Insert an encrypted document.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#7-insert-an-encrypted-document","content":"  # TODO CODE_BLOCK_20 encrypted_collection = encrypted_client[encrypted_database_name][encrypted_collection_name] result = &lt;CODE_BLOCK_20&gt; print(f&quot;Inserted document ID: {result.inserted_id}&quot;)   tip Answer encrypted_collection = encrypted_client[encrypted_database_name][encrypted_collection_name] result = encrypted_collection.insert_one(patient_document) print(f&quot;Inserted document ID: {result.inserted_id}&quot;)   ","version":"Next","tagName":"h3"},{"title":"6. Query the encrypted collection.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#6-query-the-encrypted-collection","content":" # TODO CODE_BLOCK_21 find_result = &lt;CODE_BLOCK_21&gt; print(find_result) ...   tip Answer find_result = encrypted_collection.find_one({ &quot;patientRecord.ssn&quot;: &quot;987-65-4320&quot; }) print(find_result)   ","version":"Next","tagName":"h3"},{"title":"7. Query the collection without encryption.‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#7-query-the-collection-without-encryption","content":" # CODE_BLOCK_22 reg_mongoclient = MongoClient(new_connection) # TODO CODE_BLOCK_22 find_result = reg_mongoclient[encrypted_database_name][encrypted_collection_name].find_one(...) print(find_result) all_docs = reg_mongoclient[encrypted_database_name][encrypted_collection_name].find() print(&quot;\\nAll documents in the collection:&quot;) for doc in all_docs: print(doc)   tip Answer print(&quot;\\nQuerying without encryption:&quot;) reg_mongoclient = MongoClient(new_connection) find_result = reg_mongoclient[encrypted_database_name][encrypted_collection_name].find_one({ &quot;patientRecord.ssn&quot;: &quot;987-65-4320&quot; }) print(find_result) all_docs = reg_mongoclient[encrypted_database_name][encrypted_collection_name].find() print(&quot;\\nAll documents in the collection:&quot;) for doc in all_docs: print(doc)   ","version":"Next","tagName":"h3"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üëê RUN : Queryable Encryption challenge","url":"/security-basics-lab/docs/challenge/queryable-encryption#next-steps","content":" Start the chapter on On-Premises for self-managed deployments. ","version":"Next","tagName":"h2"},{"title":"üëê Initial Setup and access for Atlas CLI","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/setup","content":"","keywords":"","version":"Next"},{"title":"1. Install atlas CLI on the notebook environment.‚Äã","type":1,"pageTitle":"üëê Initial Setup and access for Atlas CLI","url":"/security-basics-lab/docs/setup#1-install-atlas-cli-on-the-notebook-environment","content":" # CODE_BLOCK_1 # prompt: Install Atlas CLI using this link https://fastdl.mongodb.org/mongocli/mongodb-atlas-cli_1.31.0_linux_x86_64.deb !wget https://fastdl.mongodb.org/mongocli/mongodb-atlas-cli_1.31.0_linux_x86_64.deb !dpkg -i mongodb-atlas-cli_1.31.0_linux_x86_64.deb ## Might require: ## !sudo dpkg -i mongodb-atlas-cli_1.31.0_linux_x86_64.deb   ","version":"Next","tagName":"h3"},{"title":"2. Authenticate the CLI against your Atlas organization.‚Äã","type":1,"pageTitle":"üëê Initial Setup and access for Atlas CLI","url":"/security-basics-lab/docs/setup#2-authenticate-the-cli-against-your-atlas-organization","content":" # CODE_BLOCK_2 # Authenticate with Atlas CLI !echo -e &quot;\\n&quot; | atlas auth login --noBrowser   tip Important! This task requires you to click the connect link https://account.mongodb.com/account/connect and input the 8 digit code prompted. Once logged in you should see a success mark on that cell. Example Run the cell and get the verification code as well as the authentication link and open it in a new tab: Proceed to login into https://account.mongodb.com/account/connect and provide the code in the opened authentication tab: Confirm the CLI access and go back to the notebook: You should see an output in the notebook cell similar to: To verify your account, copy your one-time verification code: X9G4-KP98 Paste the code in the browser when prompted to activate your Atlas CLI. Your code will expire after 10 minutes. To continue, go to https://account.mongodb.com/account/connect Successfully logged in as pavel.duchovny@mongodb.com. ... Take a note of the relevant Organization ID for next steps and &quot;STOP&quot; the cell.  ","version":"Next","tagName":"h3"},{"title":"3. Create a new project called \"MySecureProj\" on your orgonisation of choice‚Äã","type":1,"pageTitle":"üëê Initial Setup and access for Atlas CLI","url":"/security-basics-lab/docs/setup#3-create-a-new-project-called-mysecureproj-on-your-orgonisation-of-choice","content":" # CODE_BLOCK_3 org_id = &quot;&lt;ORGANIZATION_ID&gt;&quot; !atlas projects create MySecureProj --orgId {org_id}   This cell should print out the project id you need for the next step.  Hint! : Some notebook environments will need the getpass installation command !pip install getpass  ","version":"Next","tagName":"h3"},{"title":"4. Create your challenge cluster‚Äã","type":1,"pageTitle":"üëê Initial Setup and access for Atlas CLI","url":"/security-basics-lab/docs/setup#4-create-your-challenge-cluster","content":" # CODE_BLOCK_4 project_id = &quot;&lt;PROJECT_ID&gt;&quot; !atlas clusters create MyNewCluster --provider AWS --region US_EAST_1 --tier M0 --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üëê Initial Setup and access for Atlas CLI","url":"/security-basics-lab/docs/setup#next-steps","content":" Progress to Network Setup for authorising access to your Atlas deployment. ","version":"Next","tagName":"h2"},{"title":"üìò Role-Based Access Control (RBAC)","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/rbac","content":"","keywords":"","version":"Next"},{"title":"Understanding RBAC Components‚Äã","type":1,"pageTitle":"üìò Role-Based Access Control (RBAC)","url":"/security-basics-lab/docs/rbac#understanding-rbac-components","content":" ","version":"Next","tagName":"h2"},{"title":"Roles‚Äã","type":1,"pageTitle":"üìò Role-Based Access Control (RBAC)","url":"/security-basics-lab/docs/rbac#roles","content":" A role consists of:  Privileges (actions allowed on resources)Roles (other roles from which this role inherits privileges)  MongoDB AtlasOn-Premises Built-in Roles in Atlas‚Äã Organization Roles (examples) Organization OwnerOrganization MemberOrganization Read Only For all roles see this Documentation. Project Roles (examples) Project OwnerProject Data Access AdminProject Data Access Read/WriteProject Read Only For more project level roles see this Documentation. Managing Roles in Atlas‚Äã ## Using Atlas CLI to create a user with specific roles atlas dbusers create \\ --username dataAdmin \\ --password &quot;securePassword&quot; \\ --role &quot;readWrite@admin&quot; \\ --projectId your-project-id ## Add additional roles atlas dbusers update dataAdmin \\ --role &quot;readAnyDatabase@admin&quot; \\ --projectId your-project-id Custom Roles Example‚Äã ## Create a custom role for sales data access atlas customDbRoles create &lt;role-name&gt; --inheritedRole read@salesDB --projectId {project_id} ## Assign a custom role atlas dbusers create --username readOnlyUser --password readOnlyPass --role &lt;role-name&gt; --projectId {project_id}   ","version":"Next","tagName":"h3"},{"title":"Role Management Best Practices‚Äã","type":1,"pageTitle":"üìò Role-Based Access Control (RBAC)","url":"/security-basics-lab/docs/rbac#role-management-best-practices","content":" MongoDB AtlasOn-Premises Project-Level Access Control Use Project roles for team-based accessImplement separate projects for development/productionRegular audit of project members API Access Use programmatic API keys with appropriate rolesRotate API keys regularlyMonitor API key usage Example: // Create programmatic API key atlas organizations apiKeys create \\ --desc &quot;Application API Key&quot; \\ --role ORG_MEMBER   ","version":"Next","tagName":"h2"},{"title":"Practical Examples‚Äã","type":1,"pageTitle":"üìò Role-Based Access Control (RBAC)","url":"/security-basics-lab/docs/rbac#practical-examples","content":" MongoDB AtlasOn-Premises Application-Specific Roles‚Äã // Create read-only analytics role atlas customDBRoles create analyticsReader \\ --privilege '{ resource: { db: &quot;analytics&quot;, collection: &quot;&quot; }, actions: [&quot;find&quot;] }' \\ --projectId your-project-id Custom role 'analyticsReader' successfully created. // Assign role to user atlas dbusers create \\ --username analyst \\ --password &quot;securePassword&quot; \\ --role analyticsReader \\ --projectId your-project-id Database user 'analyst' successfully created.   ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"üìò Role-Based Access Control (RBAC)","url":"/security-basics-lab/docs/rbac#next-steps","content":" After understanding RBAC, lets do a challenge to test our knowledge. ","version":"Next","tagName":"h2"},{"title":"Security Considerations","type":0,"sectionRef":"#","url":"/security-basics-lab/docs/considerations","content":"","keywords":"","version":"Next"},{"title":"Introduction‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#introduction","content":" This comprehensive guide explores advanced security measures for MongoDB deployments, following a defense-in-depth approach. We'll progress from fundamental security concepts to advanced implementations, ensuring a thorough understanding of MongoDB security.  ","version":"Next","tagName":"h2"},{"title":"Learning Path‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#learning-path","content":" Foundation: Understanding basic security principlesImplementation: Hands-on configuration and setupAdvanced Features: Exploring sophisticated security measuresCompliance: Meeting industry standardsMaintenance: Ongoing security management  ","version":"Next","tagName":"h3"},{"title":"Security Foundation‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#security-foundation","content":" ","version":"Next","tagName":"h2"},{"title":"Key Security Concepts‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#key-security-concepts","content":" Authentication and AuthorizationEncryption (At-rest/Data at-rest and In-transit)Audit LoggingNetwork SecurityBackup and Recovery  ","version":"Next","tagName":"h3"},{"title":"Security Architecture Overview‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#security-architecture-overview","content":"   ","version":"Next","tagName":"h3"},{"title":"Security Implementation Roadmap‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#security-implementation-roadmap","content":" Phase 1: Basic Security Setup Authentication setupNetwork securityBasic encryption Phase 2: Advanced Security Features AuditingMonitoringAdvanced encryption Phase 3: Compliance and Maintenance Regular auditsCompliance checkingSecurity updates  ","version":"Next","tagName":"h2"},{"title":"Auditing and Monitoring‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#auditing-and-monitoring","content":" MongoDB AtlasOn-Premises Enable Database Auditing‚Äã // View audit logs using Atlas CLI atlas logs audit download \\ --projectId your-project-id \\ --output audit.json // Configure alert settings atlas alerts settings modify \\ --projectId your-project-id \\ --enabled true Importance: Database auditing provides a record of all database activities, which is crucial for identifying security breaches and ensuring compliance. Monitoring Configuration‚Äã Set up Database Alerts atlas alerts create \\ --eventTypeName OUTSIDE_METRIC_THRESHOLD \\ --metricName CONNECTIONS \\ --threshold 5000 Importance: Setting up alerts allows you to be notified of critical events, such as high connection counts, enabling you to respond quickly to potential issues. Configure Monitoring Integrations atlas integrations create DATADOG \\ --apiKey your-datadog-api-key \\ --projectId your-project-id Importance: Integrating with monitoring tools like Datadog provides comprehensive insights into your database's performance and security, enabling proactive management.  ","version":"Next","tagName":"h2"},{"title":"Backup and Recovery‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#backup-and-recovery","content":" MongoDB AtlasOn-Premises Continuous Backup‚Äã Configure backup policy: atlas clusters update backup \\ --projectId your-project-id \\ --clusterName Cluster0 \\ --provider AWS \\ --type continuous Importance: Continuous backups ensure that you can recover your data to any point in time, minimizing data loss in case of a failure. Point-in-Time Recovery‚Äã Restore to specific point: atlas clusters restore \\ --projectId your-project-id \\ --clusterName Cluster0 \\ --typeTimestamp 2024-01-20T10:00:00Z Importance: Point-in-time recovery allows you to restore your database to a specific point in time, which is crucial for recovering from accidental data deletion or corruption.  ","version":"Next","tagName":"h2"},{"title":"On-Premise Security Architecture‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#on-premise-security-architecture","content":" DevelopmentProduction Development Environment Setup‚Äã # mongod.conf for development security: authorization: enabled net: bindIp: 127.0.0.1 port: 27017 tls: mode: preferTLS certificateKeyFile: /path/to/mongodb-dev.pem Local Testing Configuration‚Äã // Create development admin user use admin db.createUser({ user: &quot;devAdmin&quot;, pwd: &quot;devPassword&quot;, roles: [ { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; }, { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; } ] })   ","version":"Next","tagName":"h2"},{"title":"Advanced Security Features‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#advanced-security-features","content":" EncryptionAuditing Enterprise Encryption‚Äã Configure enterprise encryption: security: enableEncryption: true encryptionCipherMode: AES256-CBC encryptionKeyFile: /path/to/master-key.txt kmip: serverName: kmip.server.com port: 5696 clientCertificateFile: /path/to/kmip.pem Encryption Key Rotation‚Äã // Rotate database key db.adminCommand({ rotateMasterKey: 1 }) // Check encryption status db.adminCommand({ getCipherInformation: 1 })   ","version":"Next","tagName":"h2"},{"title":"Security Compliance‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#security-compliance","content":" PCI DSSGDPR PCI DSS Requirements‚Äã Install and maintain a firewall configuration # Configure iptables for PCI compliance iptables -A INPUT -p tcp --dport 27017 -j LOG iptables -A INPUT -p tcp --dport 27017 -m state --state NEW -m recent --set iptables -A INPUT -p tcp --dport 27017 -m state --state NEW -m recent --update --seconds 60 --hitcount 10 -j DROP Encrypt transmission of cardholder data # mongod.conf security: enableEncryption: true net: tls: mode: requireTLS FIPSMode: true   ","version":"Next","tagName":"h2"},{"title":"Best Practices Summary‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#best-practices-summary","content":" System Configuration Enable authentication and authorization Configure TLS/SSL encryption Set up IP binding restrictions Implement RBAC Monitoring and Auditing Configure audit logging Set up monitoring tools Implement log rotation Enable performance monitoring Backup and Recovery Implement automated backups Test recovery procedures Secure backup storage Document recovery processes Compliance and Documentation Maintain security documentation Regular security audits Compliance validation Staff training  ","version":"Next","tagName":"h2"},{"title":"Next Steps‚Äã","type":1,"pageTitle":"Security Considerations","url":"/security-basics-lab/docs/considerations#next-steps","content":" After implementing these advanced security measures:  Regularly test security configurationsConduct security auditsUpdate documentationTrain team members on security procedures ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}