"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([[4020],{3194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"challenge/rbac","title":"RUN : RBAC challenge","description":"Hint! Remember to add the --projectId","source":"@site/docs/challenge/rbac.mdx","sourceDirName":"challenge","slug":"/challenge/rbac","permalink":"/docs/challenge/rbac","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/security-basics-labs/blob/main/docs/challenge/rbac.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Role-Based Access Control","permalink":"/docs/rbac/"},"next":{"title":"Queryable Encryption","permalink":"/docs/queryable-encryption/"}}');var a=n(4848),r=n(8453);const o={sidebar_position:2},d="RUN : RBAC challenge",c={},i=[{value:"1. Let&#39;s create a user: &#39;myAdmin&#39; with User/Password authentication and assign it the &#39;readWriteAnyDatabase&#39; role, but only for the &#39;MyNewCluster&#39; database.",id:"1-lets-create-a-user-myadmin-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role-but-only-for-the-mynewcluster-database",level:3},{value:"2. Let&#39;s create a user: &#39;readOnlyUser&#39; with read-only access to the &#39;salesDB&#39; database.",id:"2-lets-create-a-user-readonlyuser-with-read-only-access-to-the-salesdb-database",level:3},{value:"3. Let&#39;s test that the &#39;readOnlyUser&#39; cannot insert data into the &#39;salesDB&#39; database.",id:"3-lets-test-that-the-readonlyuser-cannot-insert-data-into-the-salesdb-database",level:3},{value:"4. Let&#39;s test that the &#39;myAdmin&#39; user can insert data into the &#39;salesDB&#39; database.",id:"4-lets-test-that-the-myadmin-user-can-insert-data-into-the-salesdb-database",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"run--rbac-challenge",children:"RUN : RBAC challenge"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Hint! Remember to add the ",(0,a.jsx)(t.code,{children:"--projectId {project_id}"})]}),"\n"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Docs : atlas ",(0,a.jsx)(t.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"dbusers"})," , ",(0,a.jsx)(t.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-customDbRoles-create/",children:"customDbRoles"})]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"1-lets-create-a-user-myadmin-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role-but-only-for-the-mynewcluster-database",children:"1. Let's create a user: 'myAdmin' with User/Password authentication and assign it the 'readWriteAnyDatabase' role, but only for the 'MyNewCluster' database."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# CODE_BLOCK_12\n!atlas dbusers create ...\n"})}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:" Answer "}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"!atlas dbusers create --username myAdmin --password secureAdminPass --role readWriteAnyDatabase --scope 'MyNewCluster'  --projectId {project_id}\n"})})]}),"\n",(0,a.jsx)(t.h3,{id:"2-lets-create-a-user-readonlyuser-with-read-only-access-to-the-salesdb-database",children:"2. Let's create a user: 'readOnlyUser' with read-only access to the 'salesDB' database."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# CODE_BLOCK_13\n!atlas customDbRoles create ...\n!atlas dbusers create ...\n"})}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:" Answer "}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"!atlas customDbRoles create salesRead --inheritedRole read@salesDB --projectId {project_id}\n!atlas dbusers create --username readOnlyUser --password readOnlyPass --role salesRead --projectId {project_id}\n"})})]}),"\n",(0,a.jsx)(t.h3,{id:"3-lets-test-that-the-readonlyuser-cannot-insert-data-into-the-salesdb-database",children:"3. Let's test that the 'readOnlyUser' cannot insert data into the 'salesDB' database."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# CODE_BLOCK_14\n# Assuming you have the connection string and credentials for the readOnlyUser\nusername = 'readOnlyUser'\npassword = 'readOnlyPass'\n\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@')\n\nclient = MongoClient(new_connection)\ndb = client['salesDB']\ncollection = db['mycollection']\n\ntry:\n  # Attempt to insert data\n  data = {'name': 'John Doe', 'age': 30}\n  result = collection.insert_one(data)\n  print(f\"Inserted document with ID: {result.inserted_id}\")\nexcept Exception as e:\n  print(f\"Error inserting data: {e}\")\n"})}),"\n",(0,a.jsx)(t.h3,{id:"4-lets-test-that-the-myadmin-user-can-insert-data-into-the-salesdb-database",children:"4. Let's test that the 'myAdmin' user can insert data into the 'salesDB' database."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# CODE_BLOCK_15\n# Assuming you have the connection string and credentials for the myAdmin user\n...\n"})}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:" Answer "}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# Assuming you have the connection string and credentials for the myAdmin user\nusername = 'myAdmin'\npassword = 'secureAdminPass'\n\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@')\n\nclient = MongoClient(new_connection)\ndb = client['salesDB']\ncollection = db['mycollection']\n\ntry:\n# Attempt to insert data\ndata = {'name': 'John Doe', 'age': 30}\nresult = collection.insert_one(data)\nprint(f\"Inserted document with ID: {result.inserted_id}\")\nexcept Exception as e:\nprint(f\"Error inserting data: {e}\")\n"})})]}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(t.p,{children:["Start the chapter on ",(0,a.jsx)(t.a,{href:"./queryable-encryption",children:"Queryable Encryption"})," for data encryption."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);