"use strict";(self.webpackChunksecurity_basics_lab=self.webpackChunksecurity_basics_lab||[]).push([[4189],{8995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"challenge/authentication","title":"\ud83d\udc50 RUN: Authentication Challenge","description":"The provided scripts are incomplete. Replace all `` with the correct code to complete the lab.","source":"@site/docs/challenge/authentication.mdx","sourceDirName":"challenge","slug":"/challenge/authentication","permalink":"/security-basics-lab/docs/challenge/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/security-basics-lab/blob/main/docs/challenge/authentication.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/security-basics-lab/docs/authentication/"},"next":{"title":"Role-Based Access Control","permalink":"/security-basics-lab/docs/rbac/"}}');var r=t(4848),a=t(8453);const c={sidebar_position:2},o="\ud83d\udc50 RUN: Authentication Challenge",i={},l=[{value:"1. Create a SCRAM user",id:"1-create-a-scram-user",level:3},{value:"2. Let&#39;s test our SCRAM user successful creation by performing the authentication process",id:"2-lets-test-our-scram-user-successful-creation-by-performing-the-authentication-process",level:3},{value:"3. Create a X509 user and certificate",id:"3-create-a-x509-user-and-certificate",level:3},{value:"4. Let&#39;s test our X509 user",id:"4-lets-test-our-x509-user",level:3},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-run-authentication-challenge",children:"\ud83d\udc50 RUN: Authentication Challenge"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The provided scripts are incomplete. Replace all ",(0,r.jsx)(n.code,{children:"<CODE_BLOCK>"})," with the correct code to complete the lab."]})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Hint: Remember to add ",(0,r.jsx)(n.code,{children:"--projectId {project_id}"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"1-create-a-scram-user",children:"1. Create a SCRAM user"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# create a SCRAM user with username: "myUser", password: "mySecurePassword" and role: "readWriteAnyDatabase"\nusername = "myUser"\npassword = "mySecurePassword"\n!atlas dbusers create <CODE_BLOCK>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Refer to documentation: ",(0,r.jsx)(n.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"atlas dbusers"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:" Answer "}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# create a SCRAM user with username: "myUser", password: "mySecurePassword" and role: "readWriteAnyDatabase"\nusername = "myUser"\npassword = "mySecurePassword"\n!atlas dbusers create --username {username} --password {password} --role readWriteAnyDatabase --projectId {project_id}\n'})})]})}),"\n",(0,r.jsx)(n.h3,{id:"2-lets-test-our-scram-user-successful-creation-by-performing-the-authentication-process",children:"2. Let's test our SCRAM user successful creation by performing the authentication process"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"!pip install pymongo dnspython  \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# retrieve connection string\nconnection = !atlas clusters connectionStrings describe  MyNewCluster --projectId {project_id}\n\n# add username and password to connection string\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@')\nprint(new_connection)\n\n#make the connection get the list of databases\nfrom pymongo import MongoClient\nclient = MongoClient(new_connection)\nclient.list_database_names()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-create-a-x509-user-and-certificate",children:"3. Create a X509 user and certificate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# create a Atlas-managed X509 user with username: "myX509User" and role: "readAnyDatabase" \n!atlas dbusers create <CODE_BLOCK>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Refer to documentation: ",(0,r.jsx)(n.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"atlas dbusers"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Generate a certification for "myX509user", set monthsUntilExpiration to 1, and save it to /tmp/cert.pem\n!atlas dbusers certs create <CODE_BLOCK> > /tmp/cert.pem\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Refer to documentation: ",(0,r.jsx)(n.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-certs-create/",children:"atlas dbusers certs"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:" Answer "}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# create a Atlas-managed X509 user with username: "myX509User" and role: "readAnyDatabase" \n!atlas dbusers create --username myX509User --role readAnyDatabase --x509Type MANAGED --projectId {project_id}\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Generate a certification for "myX509user", set monthsUntilExpiration to 1, and save it to /tmp/cert.pem\n!atlas dbusers certs create --username myX509User --monthsUntilExpiration 1 --projectId {project_id} > /tmp/cert.pem\n'})})]})}),"\n",(0,r.jsx)(n.h3,{id:"4-lets-test-our-x509-user",children:"4. Let's test our X509 user"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Get connection string\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\n\n# Modify connection string to use X509 as authentication mechanism \nnew_connection = connection[1].replace('.net', '.net?authSource=%24external&authMechanism=MONGODB-X509')\nprint(new_connection)\n\n# Connect using the certificate\nfrom pymongo import MongoClient\nclient = MongoClient(new_connection,\n                     tlsCertificateKeyFile='/tmp/cert.pem')\n\n# Access the database\nclient.list_database_names()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsxs)(n.p,{children:["Start the chapter on ",(0,r.jsx)(n.a,{href:"./rbac",children:"RBAC"})," for role-based access user management."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);