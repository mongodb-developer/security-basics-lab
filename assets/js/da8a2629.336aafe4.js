"use strict";(self.webpackChunksecurity_basics_lab=self.webpackChunksecurity_basics_lab||[]).push([[4020],{3194:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"challenge/rbac","title":"\ud83d\udc50 RUN : RBAC Challenge","description":"The provided scripts are incomplete. Replace all `` with the correct code to complete the lab.","source":"@site/docs/challenge/rbac.mdx","sourceDirName":"challenge","slug":"/challenge/rbac","permalink":"/security-basics-lab/docs/challenge/rbac","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/security-basics-lab/blob/main/docs/challenge/rbac.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Role-Based Access Control","permalink":"/security-basics-lab/docs/rbac/"},"next":{"title":"Queryable Encryption","permalink":"/security-basics-lab/docs/queryable-encryption/"}}');var n=a(4848),r=a(8453);const c={sidebar_position:2},d="\ud83d\udc50 RUN : RBAC Challenge",l={},o=[{value:"1. Create a user for &quot;MyNewCluster&quot; database with role-based access.",id:"1-create-a-user-for-mynewcluster-database-with-role-based-access",level:3},{value:"2. Create a user with read-only access to the &quot;salesDB&quot; database.",id:"2-create-a-user-with-read-only-access-to-the-salesdb-database",level:3},{value:"3. Test that &quot;salesReadUser&quot; cannot insert data into the &quot;salesDB&quot; database.",id:"3-test-that-salesreaduser-cannot-insert-data-into-the-salesdb-database",level:3},{value:"4. Test that &quot;myNewClusterAdmin&quot; can insert data into the &quot;salesDB&quot; database.",id:"4-test-that-mynewclusteradmin-can-insert-data-into-the-salesdb-database",level:3},{value:"Next steps",id:"next-steps",level:2}];function i(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:a}=s;return a||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"-run--rbac-challenge",children:"\ud83d\udc50 RUN : RBAC Challenge"})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["The provided scripts are incomplete. Replace all ",(0,n.jsx)(s.code,{children:"<CODE_BLOCK>"})," with the correct code to complete the lab."]})}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["Hint: Remember to add ",(0,n.jsx)(s.code,{children:"--projectId {project_id}"}),"\nRefer to the documentation: ",(0,n.jsx)(s.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"atlas dbusers"})," , ",(0,n.jsx)(s.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-customDbRoles-create/",children:"atlas customDbRoles"})]})}),"\n",(0,n.jsx)(s.h3,{id:"1-create-a-user-for-mynewcluster-database-with-role-based-access",children:'1. Create a user for "MyNewCluster" database with role-based access.'}),"\n",(0,n.jsxs)(s.p,{children:["Create a new user with the built-in role ",(0,n.jsx)(s.code,{children:"readWriteAnyDatabase"})," and the username and password below."]}),"\n",(0,n.jsxs)(s.p,{children:["The user access should be scoped to the ",(0,n.jsx)(s.code,{children:"myNewCluster"})," cluster. Use the ",(0,n.jsx)(s.code,{children:"--scope"})," option."]}),"\n",(0,n.jsxs)(s.p,{children:["Refer to the documentation: ",(0,n.jsx)(s.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"# Create a user:'myNewClusterAdmin', password:'myNewClusterAdminPass', role: 'readWriteAnyDatabase'\n# and scoped to \"MyNewCluster\" database\nnewClusterAdminUser = 'myNewClusterAdmin'\nnewClusterAdminPass = 'myNewClusterAdminPass'\n!atlas dbusers create <CODE_BLOCK>\n"})}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:" Answer "}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"# Create a user:'myNewClusterAdmin', password:'myNewClusterAdminPass', role: 'readWriteAnyDatabase'\n# and scoped to \"MyNewCluster\" database\nnewClusterAdminUser = 'myNewClusterAdmin'\nnewClusterAdminPass = 'myNewClusterAdminPass'\n!atlas dbusers create --username {newClusterAdminUser} --password {newClusterAdminPass} --role readWriteAnyDatabase --scope 'MyNewCluster' --projectId {project_id} \n"})})]})}),"\n",(0,n.jsx)(s.h3,{id:"2-create-a-user-with-read-only-access-to-the-salesdb-database",children:'2. Create a user with read-only access to the "salesDB" database.'}),"\n",(0,n.jsxs)(s.p,{children:["Create a custom role named ",(0,n.jsx)(s.code,{children:"salesRead"})," with read-only access to the ",(0,n.jsx)(s.code,{children:"salesDB"})," database."]}),"\n",(0,n.jsxs)(s.p,{children:["Refer to the documentation: ",(0,n.jsx)(s.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-customDbRoles-create",children:"atlas customDbRoles"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'#Create a role "salesRead" which access to read-only role to salesDB database\n!atlas customDbRoles create <CODE_BLOCK>\n'})}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:" Answer "}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'#Create a role "salesRead" which access to read-only role to salesDB database\n!atlas customDbRoles create salesRead --inheritedRole read@salesDB --projectId {project_id}\n'})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Now, we will create a user ",(0,n.jsx)(s.code,{children:"salesReadUser"})," with password ",(0,n.jsx)(s.code,{children:"salesReadPass"})," which has the ",(0,n.jsx)(s.code,{children:"salesRead"})," role."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"salesReadUser = 'salesReadUser'\nsalesReadPass = 'salesReadPass'\n!atlas dbusers create <CODE_BLOCK>\n"})}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:" Answer "}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'#Create a user "salesReadUser" with password "salesReadPass" which has the "salesRead" role\nsalesReadUser = \'salesReadUser\'\nsalesReadPass = \'salesReadPass\'\n!atlas dbusers create --username salesReadUser --password salesReadPass --role salesRead --projectId {project_id}\n'})})]})}),"\n",(0,n.jsx)(s.h3,{id:"3-test-that-salesreaduser-cannot-insert-data-into-the-salesdb-database",children:'3. Test that "salesReadUser" cannot insert data into the "salesDB" database.'}),"\n",(0,n.jsxs)(s.p,{children:["We will test that indeed ",(0,n.jsx)(s.code,{children:"salesReadUser"})," can't write to the database."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"# Get connection string\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\n\n# Replace connection string with username and password\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{salesReadUser}:{salesReadPass}@')\n\n# Attempt to insert data\nclient = MongoClient(new_connection)\ndb = client['salesDB']\ncollection = db['mycollection']\ntry:\n  data = {'name': 'John Doe', 'age': 30}\n  result = collection.insert_one(data)\n  print(f\"Inserted document with ID: {result.inserted_id}\")\nexcept Exception as e:\n  print(f\"Error inserting data: {e}\")\n"})}),"\n",(0,n.jsx)(s.h3,{id:"4-test-that-mynewclusteradmin-can-insert-data-into-the-salesdb-database",children:'4. Test that "myNewClusterAdmin" can insert data into the "salesDB" database.'}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"# Get connection string\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\n\n# Replace connection string with username and password\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{newClusterAdminUser}:{newClusterAdminPass}@')\n\n# Attempt to insert data\nclient = MongoClient(new_connection)\ndb = client['salesDB']\ncollection = db['mycollection']\ntry:\n  data = {'name': 'John Doe', 'age': 30}\n  result = collection.insert_one(data)\n  print(f\"Inserted document with ID: {result.inserted_id}\")\nexcept Exception as e:\n  print(f\"Error inserting data: {e}\")\n"})}),"\n",(0,n.jsx)(s.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,n.jsxs)(s.p,{children:["Start the chapter on ",(0,n.jsx)(s.a,{href:"./queryable-encryption",children:"queryable encryption"})," for data encryption."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}}}]);