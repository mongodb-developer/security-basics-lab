"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([[4189],{8995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"challenge/authentication","title":"RUN : Authentication challenge","description":"Hint! Remember to add the --projectId","source":"@site/docs/challenge/authentication.mdx","sourceDirName":"challenge","slug":"/challenge/authentication","permalink":"/mongodb-security-basics/docs/challenge/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/mongodb-security-basics/blob/main/docs/challenge/authentication.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/mongodb-security-basics/docs/authentication/"},"next":{"title":"Role-Based Access Control","permalink":"/mongodb-security-basics/docs/rbac/"}}');var r=n(4848),a=n(8453);const i={sidebar_position:2},c="RUN : Authentication challenge",o={},d=[{value:"1. Let&#39;s create a SCRAM user: &#39;myUser&#39; with User/Password authentication and assign it the &#39;readWriteAnyDatabase&#39; role.",id:"1-lets-create-a-scram-user-myuser-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role",level:3},{value:"2. Lets test our SCRAM user successful creation by performing the authentication process",id:"2-lets-test-our-scram-user-successful-creation-by-performing-the-authentication-process",level:3},{value:"3. Let&#39;s create  X509 user: &#39;myX509User&#39; with User/Password authentication and assign it the &#39;readWriteAnyDatabase&#39; role.",id:"3-lets-create--x509-user-myx509user-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role",level:3},{value:"4. Let&#39;s test our X509 User",id:"4-lets-test-our-x509-user",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"run--authentication-challenge",children:"RUN : Authentication challenge"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Hint! Remember to add the ",(0,r.jsx)(t.code,{children:"--projectId {project_id}"})]}),"\n"]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Docs : atlas ",(0,r.jsx)(t.a,{href:"https://www.mongodb.com/docs/atlas/cli/current/command/atlas-dbusers-create/",children:"dbusers"})]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"1-lets-create-a-scram-user-myuser-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role",children:"1. Let's create a SCRAM user: 'myUser' with User/Password authentication and assign it the 'readWriteAnyDatabase' role."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# CODE_BLOCK_7\n!atlas dbusers create ...\n"})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:" Answer "}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"!atlas dbusers create --username myUser --password mySecurePassword --role readWriteAnyDatabase --projectId {project_id}\n"})})]}),"\n",(0,r.jsx)(t.h3,{id:"2-lets-test-our-scram-user-successful-creation-by-performing-the-authentication-process",children:"2. Lets test our SCRAM user successful creation by performing the authentication process"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# CODE_BLOCK_8\n!pip install pymongo dnspython  \n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# CODE_BLOCK_9\nconnection = !atlas clusters connectionStrings describe  MyNewCluster --projectId {project_id}\n\nusername = 'myUser'\npassword = 'mySecurePassword'\n\nnew_connection = connection[1].replace('mongodb+srv://', f'mongodb+srv://{username}:{password}@')\nprint(new_connection)\n\nfrom pymongo import MongoClient\nclient = MongoClient(new_connection)\n\nclient.list_database_names()\n"})}),"\n",(0,r.jsx)(t.h3,{id:"3-lets-create--x509-user-myx509user-with-userpassword-authentication-and-assign-it-the-readwriteanydatabase-role",children:"3. Let's create  X509 user: 'myX509User' with User/Password authentication and assign it the 'readWriteAnyDatabase' role."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# CODE_BLOCK_10\n!atlas dbusers create ...\n\n!atlas dbusers certs create ...  > /tmp/cert.pem\n"})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:" Answer "}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# Generate an X509 certificate for a new user\n!atlas dbusers create --username myX509User --x509Type MANAGED --role readAnyDatabase --projectId {project_id}\n# Generate and save the certificate\n!atlas dbusers certs create --username myX509User --monthsUntilExpiration 1 --projectId {project_id} > /tmp/cert.pem\n"})})]}),"\n",(0,r.jsx)(t.h3,{id:"4-lets-test-our-x509-user",children:"4. Let's test our X509 User"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# CODE_BLOCK_11\nusername='myX509User'\nconnection = !atlas clusters connectionStrings describe MyNewCluster --projectId {project_id}\nnew_connection = connection[1].replace('.net', '.net?authSource=%24external&authMechanism=MONGODB-X509')\nprint(new_connection)\n\n# Connect using the certificate\nfrom pymongo import MongoClient\nclient = MongoClient(new_connection,\n                     tlsCertificateKeyFile='/tmp/cert.pem')\n\n# Access the database\nclient.list_database_names()\n\n"})}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.p,{children:["Start the chapter on ",(0,r.jsx)(t.a,{href:"./rbac",children:"RBAC"})," for Role Based Access user management."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);